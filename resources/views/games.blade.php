@extends("layouts.layout")

@section("title", "–ò–≥—Ä—ã")

@section("content")
    <section id="games" class="games-section">
        <div class="section-content">
            <h2>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä</h2>

            <!-- –§–∏–ª—å—Ç—Ä –∏ —Ç–∞–±—ã -->
            <div class="games-filter">
                <select id="gameTypeFilter" class="filter-select">
                    <option value="all">–í—Å–µ –∏–≥—Ä—ã</option>
                    @foreach(collect($games)->collapse()->pluck('type')->unique() as $type)
                        <option value="{{ $type }}">{{ $type }}</option>
                    @endforeach
                </select>
            </div>

            <div class="games-tabs">
                <button class="tab-btn active" data-category="today">–°–µ–≥–æ–¥–Ω—è</button>
                <button class="tab-btn" data-category="upcoming">–ë–ª–∏–∂–∞–π—à–∏–µ</button>
                <button class="tab-btn" data-category="past">–ê—Ä—Ö–∏–≤</button>
            </div>

            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –∏–≥—Ä -->
            <div class="games-container">
                @foreach(['today', 'upcoming', 'past'] as $category)  <!-- –î–æ–±–∞–≤–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª -->
                <div class="game-category {{ $loop->first ? 'active' : '' }}" data-category="{{ $category }}">
                    <div class="games-grid">
                        @foreach($games[$category] ?? [] as $game)
                            <div class="game-card" data-game-id="{{ $game->id }}">
                                <div class="game-header">
                                    <span class="game-type">{{ $game->type }}</span>
                                    <span class="game-date">
                                        {{ $game->date->format('d.m.Y') }}
                                        {{ \Carbon\Carbon::parse($game->time)->format('H:i') }}

                                        @if($game->full_date_time)
                                            ({{ $game->full_date_time->diffForHumans() }})
                                        @else
                                            (–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞)
                                        @endif
                                    </span>
                                </div>
                                <div class="game-body">
                                    <p>üìç {{ $game->location }}</p>

                                    @if($category !== 'past')
                                        @php
                                            $available = max(0, $game->max_players - $game->registrations_count);
                                            $isRegistered = auth()->check() && auth()->user()->registrations->contains('game_id', $game->id);

                                            if (!auth()->check()) {
                                                $buttonText = '–í–æ–π–¥–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏';
                                                $disabled = true;
                                            } else {
                                                $buttonText = $isRegistered
                                                    ? '–ó–∞–ø–∏—Å–∞–Ω'
                                                    : ($available > 0 ? "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è ($available)" : '–ú–µ—Å—Ç –Ω–µ—Ç');
                                                $disabled = $isRegistered || ($available <= 0);
                                            }
                                        @endphp

                                        <button class="signup-button"
                                                data-game-id="{{ $game->id }}"
                                            {{ $disabled ? 'disabled' : '' }}>
                                            {{ $buttonText }}
                                        </button>
                                    @else
                                        <div class="game-archive-label">–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</div>
                                    @endif
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>
                @endforeach
            </div>
        </div>
    </section>
@endsection
@push('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–±–æ–≤
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
                    this.classList.add('active');

                    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    const category = this.dataset.category;

                    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    document.querySelectorAll('.game-category').forEach(cat => {
                        cat.classList.remove('active');
                    });

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    const targetCategory = document.querySelector(`.game-category[data-category="${category}"]`);
                    if(targetCategory) {
                        targetCategory.classList.add('active');
                    }
                });
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏
            document.addEventListener('click', async (e) => {
                if (e.target.classList.contains('signup-button')) {
                    const gameId = e.target.dataset.gameId;
                    const button = e.target;

                    try {
                        const response = await fetch('/registrations', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                            },
                            body: JSON.stringify({ game_id: gameId })
                        });

                        if (response.ok) {
                            button.textContent = '–ó–∞–ø–∏—Å–∞–Ω';
                            button.disabled = true;
                        } else {
                            alert('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏');
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞:', error);
                        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
                    }
                }
            });

            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            document.getElementById('gameTypeFilter').addEventListener('change', function() {
                const filter = this.value;
                document.querySelectorAll('.game-card').forEach(card => {
                    card.style.display = filter === 'all' || card.querySelector('.game-type').textContent === filter
                        ? 'block'
                        : 'none';
                });
            });
        });
        document.addEventListener('click', async (e) => {
            if (e.target.classList.contains('signup-button')) {
                const button = e.target;
                button.disabled = true;
                button.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';

                try {
                    const response = await fetch('/registrations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                        },
                        body: JSON.stringify({
                            game_id: button.dataset.gameId
                        })
                    });

                    const data = await response.json();

                    if (!response.ok) {
                        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                    }

                    button.textContent = '–ó–∞–ø–∏—Å–∞–Ω';
                    button.style.backgroundColor = '#4CAF50';

                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    alert(error.message);
                    button.textContent = '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è';
                    button.disabled = false;
                }
            }
        });
    </script>
@endpush
